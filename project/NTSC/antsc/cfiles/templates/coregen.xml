<?xml version="1.0" encoding="UTF-8"?>
<RootFolder label="COREGEN" treetype="folder" language="COREGEN">
	<Folder label="VERILOG Component Instantiation" treetype="folder">
		<Template label="divider" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
divider YourInstanceName (
    .clk(clk),
    .rfd(rfd),
    .dividend(dividend), // Bus [15 : 0] 
    .divisor(divisor), // Bus [15 : 0] 
    .quotient(quotient), // Bus [15 : 0] 
    .fractional(fractional)); // Bus [15 : 0] 

 
		</Template>
		<Template label="n_divider" treetype="template">
		</Template>
		<Template label="core_divider" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
core_divider YourInstanceName (
    .dividend(dividend), // Bus [31 : 0] 
    .divisor(divisor), // Bus [31 : 0] 
    .quot(quot), // Bus [31 : 0] 
    .remd(remd), // Bus [31 : 0] 
    .clk(clk),
    .rfd(rfd));

 
		</Template>
		<Template label="block_ram" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
block_ram YourInstanceName (
    .a(a), // Bus [9 : 0] 
    .d(d), // Bus [527 : 0] 
    .clk(clk),
    .we(we),
    .spo(spo)); // Bus [527 : 0] 

 
		</Template>
		<Template label="bram" treetype="template">
		</Template>
		<Template label="bockRam" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
bockRam YourInstanceName (
    .a(a), // Bus [9 : 0] 
    .d(d), // Bus [1023 : 0] 
    .clk(clk),
    .we(we),
    .spo(spo)); // Bus [1023 : 0] 

 
		</Template>
		<Template label="sqrt_func" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
sqrt_func YourInstanceName (
    .x_in(x_in), // Bus [21 : 0] 
    .x_out(x_out), // Bus [11 : 0] 
    .rdy(rdy),
    .clk(clk));

 
		</Template>
		<Template label="n20_divider" treetype="template">
 
 
// The following must be inserted into your Verilog file for this
// core to be instantiated. Change the instance name and port connections
// (in parentheses) to your own signal names.
 
n20_divider YourInstanceName (
    .dividend(dividend), // Bus [21 : 0] 
    .divisor(divisor), // Bus [12 : 0] 
    .quot(quot), // Bus [21 : 0] 
    .remd(remd), // Bus [12 : 0] 
    .clk(clk),
    .rfd(rfd));

 
		</Template>
	</Folder>
	<Folder label="VHDL Component Instantiation" treetype="folder">
		<Template label="divider" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component divider
    port (
    clk: IN std_logic;
    rfd: OUT std_logic;
    dividend: IN std_logic_VECTOR(15 downto 0);
    divisor: IN std_logic_VECTOR(15 downto 0);
    quotient: OUT std_logic_VECTOR(15 downto 0);
    fractional: OUT std_logic_VECTOR(15 downto 0));
end component;


 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : divider
        port map (
            clk =&gt; clk,
            rfd =&gt; rfd,
            dividend =&gt; dividend,
            divisor =&gt; divisor,
            quotient =&gt; quotient,
            fractional =&gt; fractional);
 
		</Template>
		<Template label="n_divider" treetype="template">
		</Template>
		<Template label="core_divider" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component core_divider
    port (
    dividend: IN std_logic_VECTOR(31 downto 0);
    divisor: IN std_logic_VECTOR(31 downto 0);
    quot: OUT std_logic_VECTOR(31 downto 0);
    remd: OUT std_logic_VECTOR(31 downto 0);
    clk: IN std_logic;
    rfd: OUT std_logic);
end component;


 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : core_divider
        port map (
            dividend =&gt; dividend,
            divisor =&gt; divisor,
            quot =&gt; quot,
            remd =&gt; remd,
            clk =&gt; clk,
            rfd =&gt; rfd);
 
		</Template>
		<Template label="block_ram" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component block_ram
    port (
    a: IN std_logic_VECTOR(9 downto 0);
    d: IN std_logic_VECTOR(527 downto 0);
    clk: IN std_logic;
    we: IN std_logic;
    spo: OUT std_logic_VECTOR(527 downto 0));
end component;


 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : block_ram
        port map (
            a =&gt; a,
            d =&gt; d,
            clk =&gt; clk,
            we =&gt; we,
            spo =&gt; spo);
 
		</Template>
		<Template label="bram" treetype="template">
		</Template>
		<Template label="bockRam" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component bockRam
    port (
    a: IN std_logic_VECTOR(9 downto 0);
    d: IN std_logic_VECTOR(1023 downto 0);
    clk: IN std_logic;
    we: IN std_logic;
    spo: OUT std_logic_VECTOR(1023 downto 0));
end component;


 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : bockRam
        port map (
            a =&gt; a,
            d =&gt; d,
            clk =&gt; clk,
            we =&gt; we,
            spo =&gt; spo);
 
		</Template>
		<Template label="sqrt_func" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component sqrt_func
    port (
    x_in: IN std_logic_VECTOR(21 downto 0);
    x_out: OUT std_logic_VECTOR(11 downto 0);
    rdy: OUT std_logic;
    clk: IN std_logic);
end component;


 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : sqrt_func
        port map (
            x_in =&gt; x_in,
            x_out =&gt; x_out,
            rdy =&gt; rdy,
            clk =&gt; clk);
 
		</Template>
		<Template label="n20_divider" treetype="template">
 
 
-- The following code must appear in the VHDL architecture header:
 
component n20_divider
    port (
    dividend: IN std_logic_VECTOR(21 downto 0);
    divisor: IN std_logic_VECTOR(12 downto 0);
    quot: OUT std_logic_VECTOR(21 downto 0);
    remd: OUT std_logic_VECTOR(12 downto 0);
    clk: IN std_logic;
    rfd: OUT std_logic);
end component;


 
-------------------------------------------------------------
 
-- The following code must appear in the VHDL architecture body.
-- Substitute your own instance name and net names.
 
your_instance_name : n20_divider
        port map (
            dividend =&gt; dividend,
            divisor =&gt; divisor,
            quot =&gt; quot,
            remd =&gt; remd,
            clk =&gt; clk,
            rfd =&gt; rfd);
 
		</Template>
	</Folder>
</RootFolder>
